트러블 슈팅


문제상황 1
 자바숙련도 스프링 숙련도가 낮아서 너무 어려웠다

해결방안 ->
 해당 사항을 강의내용 복습과 구글링을 통하여 복습하여 숙련도를 올린다

 이번에 과제를 하며 공부한 내용은 다음과 같다


컨트롤러 클래스에서
 중요 특징은 다음과 같다
 1. 기본적인 CRUD(Create,Read,Update,Delete) 작업을 처리한다
 2. 각 메서드는 특정 HTTP메서드(POST,GET,PUT,DELETE)와 연결되어 있습니다
 3. 데이터 유효성 검사와 오류 처리를 포함하고 있습니다
 4. 서비스 계층 (CalendarService)과 상호 작용하여 비즈니스 로직을 수행합니다

 주요 어노테이션 설명
 @RestController : REST API를 제공하는 컨트롤러임을 나타냄
 @RequestMapping : 기본 URL 경로 설정
 @PostMapping : 리소스 생성 요청 처리
 @GetMapping : 리소스 조회 요청 처리
 @PutMapping : 리소스 수정 요청 처리
 @DeleteMapping : 리소스 삭제 요청 처리



 DTO란 무엇인가?
 DTO(Data Transfer Object)는 데이터를 전송하는 데 사용되는 객체.
 클라이언트(예 : 웹 브라우저)에서 서버로 데이터를 보낼 때 사용됩니다.
 이 경우, 새로운 일정을 생성하거나 수정할 때 필요한 정보를 담고 있습니다

 Lombok 어노테이션의 역할
 @Getter : 모든 필드에 대한 getter 메서드를 자동으로 생성합니다.
 예) getTodolist(), getAuthor(), getPassword()

 @Setter : 모든 필드에 대한 setter 메서드를 자동으로 생성합니다
 예) setTodolist(), setAuthor(), setPassword()

 필드설명
 todolist : 할 일의 내용 (문자열)
 author : 할 일을 작성한 사람의 이름(문자열)
 password : 일정 보호를 위한 비밀번호(문자열)

 실제 사용 예시
 CalendarRequestDto requestDto = new CalendarRequestDto();
 requestDto.setTodolist("팀 프로젝트 회의 준비");
 requestDto.setAuthor("김개발");
 requestDto.setPassword("1234");



fromModel() 메서드의 역할
데이터베이스모델(CalendarModel)을 응답DTO로 변환
각 필드의 값을 새 객체에 복사
클라이언트에 안전하게 전달할 수 있는 데이터 객체 생성

사용예시
// 데이터베이스에서 모델 객체를 가져왔다고 가정
CalendarModel model = calendarRepository.findById(1L);

// 모델을 ResponseDto로 변환
CalendarResponseDto responseDto = CalendarResponseDto.fromModel(model);



문제 상황2
 ERD 작성과 api 명세서 작성이 처음이라 많이 어려웠다

 해결방안 ->
내일배움캠프 스프링과정 특별세션 강의를 복습하여 ERD작성법과 api명세서 작성법을 다시한번 복습하고
구글링을 통하여 관련내용 한번더 복습 하였다
결국 ERD설계는 ERD클라우드를 통하여  설계하였고
api명세서는 postman api명세서를 통하여 작성하였다.


문제 상황3
SQL문 작성이 헷갈려서  꼬였었다.

해결방안 ->
sql문 작성하고 공부한 내용을 다음과 같이 정리하였다.
복습하여 반드시 내것으로 만들자!

-- db 생성
create database calendar default character set utf8 collate utf8_general_ci;

-- db 사용
use calendar;

-- 테이블 생성
create table calendar (
                          id int auto_increment primary key,
                          author varchar(100) not null,
                          todolist varchar(255) not null,
                          password varchar(100) not null,
                          createDate timestamp default current_timestamp,
                          updateDate timestamp default current_timestamp on update current_timestamp
);

-- 공부한 내용 정리

-- 데이터베이스 생성 명령어
-- 'calendar' 라는 이름의 데이터베이스를 만든다
-- UTF-8 문자 인코딩을 사용하여 다국어 지원 및 특수 문자 처리를 가능하게 합니다
-- dafault character set utf8 : 문자 인코딩을 UTF-8로 설정
-- collate utf8_general_ci : 문자 정렬 및 비교 규칙을 지정 (대소문자 구분 없는 정렬)
-- create database calendar default character set utf8 collate utf8_general_ci;


-- 방금 생성한 'calendar'데이터베이스를 사용하겠다고 선언
-- 이후의 모든 SQL 명령어는 이 데이터베이스에서 실행됨
-- use calendar;


-- 'calendar' 테이블 생성
-- 할 일 목록(todolist)을 저장하기 위한 테이블
-- create table calendar (



-- id : 각 항목을 고유하게 식별하는 기본 키
-- auto_increment : 새 레코드 추가 시 자동으로 1씩 증가
-- primary key : 테이블의 기본 키로 지정 (중복 불가, 고유 식별자)
-- id int auto_increment primary key,



-- varchar(100) : 최대 100자 까지의 가변 길이 문자열
-- not null : 반드시 값이 있어야 함(NULL 값 허용 안함)  , 필수 입력 필드
-- timestamp : 날짜와 시간 저장 , 자동 타임 스탬프 : 생성 및 수정 시간을 자동으로 기록


문제 상황4
의존성 추가를 깜박하여 꼬였었다.

해결방안 ->
build.gradle에 추가
implementation 'mysql:mysql-connector-java:8.0.28'
implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'


문제 상황5
데이터베이스 연동 할때  스키마부분을 깜박하여 연동에 어려움을 겪었다.

해결방안 ->
데이터베이스를 연동하고 공부한 내용은 다음과 같다. 복습하여 반드시 숙지하자

실제 MySQL 데이터베이스 연동을 위해 JDBC를 사용한다

JDBC(Java Database Connectivity)
java애플리케이션에서 데이터베이스에 접근하고 데이터를 조작하기 위한 표준API

application.properties 파일에서 데이터베이스 연결 정보를 설정해야한다
설정법은 다음과 같다

spring.datasource.url=jdbc:mysql://localhost:3306/{schema이름}
spring.datasource.username={yourname}
spring.datasource.password={yourpassword}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver



# 공부한 내용정리
# 여기서 calendar 은 MySQL 에서 스키마(schema) 이름을 나타낸다
# MySQL 에서 스키마(schema)는 데이터베이스(database)와 동일한 개념이다
# 즉, 이 URL은 로컬컴퓨터에서 실행 중인 MySQL 서버의 calendar 라는 이름의
# 데이터베이스/스키마에 연결하겠다는 의미이다

# 실제 사용 예시
# 1. MySQL Workbench나 CLI 에서 CREATE SCHEMA calendar; 또는 CREATE DATABASE calendar;
# 2. 이후 use calendar; 로 해당 스키마를 선택
# 3. 이 스키마 내부에 테이블들을 생성할 수 있다.